getConsumer.desc=Creates a server connection and polls the Kafka server for recent messages. If SSL is \
enabled in the Kafka connection settings, the connection will be encrypted.
getConsumer.param.kafkaConnectionName=The name of a configured Kafka connection setting, as defined in the gateway. \
If the connection name can't be found, the module will use the first viable Kafka connection to use instead.
getConsumer.param.address=Kafka server address, including port.
getConsumer.param.topic=Kafka topic.
getConsumer.param.groupname=Kafka group id.
getConsumer.returns=\
A list of message objects.  Each message object contains keys for 'value', 'timestamp', 'partition', 'offset', 'key' and 'headers'.

publish.desc=Creates a server connection and writes to the Kafka server. If SSL is \
enabled in the Kafka connection settings, the connection will be encrypted.
publish.param.kafkaConnectionName=The name of a configured Kafka connection setting, as defined in the gateway. \
If the connection name can't be found, the module will use the first viable Kafka connection to use instead.
publish.param.address=Kafka server address, including port.
publish.param.topic=Kafka topic to send to.
publish.param.partition=Kafka partition to send to.
publish.param.timestamp=Record timestamp, in milliseconds since epoch.
publish.param.recordKey=Record key.
publish.param.recordValue=Record value.
publish.param.headerKeys=The header keys for the record, in list form.
publish.param.headerValues=The header values for the record, in list form. To match the header values to their header keys, keep the lists in the same order.
publish.returns=\
A dictionary object that contains some of the RecordMetadata properties from a successful write. \
 Keys are 'offset', 'partition', 'timestamp' and 'topic'.

seek.desc=Creates a server connection and retrieves the last N number of messages from a topic and partition. If SSL is \
enabled in the Kafka connection settings, the connection will be encrypted. Do not use this function if the \
  same group is consuming data elsewhere at the same time, as there is a possibility for data loss.
seek.param.kafkaConnectionName=The name of a configured Kafka connection setting, as defined in the gateway. \
If the connection name can't be found, the module will use the first viable Kafka connection to use instead.
seek.param.address=Kafka server address, including port.
seek.param.topic=Kafka topic.
seek.param.groupname=Kafka group id.
seek.param.partition=Partition number to seek from.
seek.param.numOfMsgs=Previous number of messages to read from.
seek.returns=\
A list of message objects.  Each message object contains keys for 'value', 'timestamp', 'partition', 'offset', 'key' and 'headers'.

getTopicPartitions.desc=Grabs the partition numbers in a topic.
getTopicPartitions.param.kafkaConnectionName=The name of a configured Kafka connection setting, as defined in the gateway. \
If the connection name can't be found, the module will use the first viable Kafka connection to use instead.
getTopicPartitions.param.address=Kafka server address, including port.
getTopicPartitions.param.topic=Kafka topic.
getTopicPartitions.param.groupname=Kafka group id.
getTopicPartitions.returns=An ordered list of partition numbers.